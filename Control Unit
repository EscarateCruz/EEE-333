module lab5(input clk, reset, output logic [3:0] OPCODE, output logic [7:0] PC, alu_out, W_Reg);

localparam IF = 3'b001, ID = 3'b010, FD = 3'b011, EX = 3'b100, RWB = 3'b101;

integer fd;

logic [7:0] temp_data, RF_data_in, RF_data_out0, RF_data_out1;
logic [3:0] RA, RB, RD;
logic [2:0] current_state, next_state;
logic [15:0] IR;

ROM InsMem1(PC, IR);
regFile regF1(reset, clk, RA, RB, RD, OPCODE, current_state, RF_data_in, RF_data_out0, RF_data_out1);

always_ff @ (posedge clk or posedge reset) begin

	if (reset) begin
		PC = 8'd0;
		OPCODE = 4'd0;
		alu_out = 8'd0;
		W_Reg = 8'd0;
		current_state <= IF;
	end
	else if (current_state == RWB) begin
		if (OPCODE == 4'b1101) begin
			PC <= temp_data;
			current_state <= next_state;
		end
		else begin
		PC <= PC + 1;
		current_state <= next_state;

		end
	end
	else if (current_state == ID) begin
		 OPCODE[3]  = IR[15];
	 	 OPCODE[2]  = IR[14];
		 OPCODE[1]  = IR[13];
		 OPCODE[0]  = IR[12];
		 RB[3] = IR[7];
		 RB[2] = IR[6];	
		 RB[1] = IR[5];
		 RB[0] = IR[4];
	 	 RA[3] = IR[11];
	 	 RA[2] = IR[10];
	 	 RA[1] = IR[9];
		 RA[0] = IR[8];
		 current_state <= next_state;
	end
	else if (current_state == FD) begin
		alu_out = {RA, RB};
		current_state <= next_state;
	end
	else if (current_state == EX) begin
		W_Reg = RD;
		current_state <= next_state;
	end

	else begin
	current_state <= next_state;
	PC <= PC + 1;
		end
	
end


always_comb begin
//fd = $fopen("LAB5tb.csv");
temp_data = 8'd0;
next_state = 3'd0;

RD[3] =  IR[3];
RD[2] =  IR[2];
RD[1] =  IR[1];
RD[0] =  IR[0];

case (current_state)
	IF : next_state = ID;
	ID : next_state = FD;
	FD : next_state = EX;
	EX : next_state = RWB;
	RWB : next_state = IF;
	default : next_state = IF;
	endcase

//$fwrite(fd, "PC = %h, IR = %h, OPCODE = %h, RA = %h, RB = %h, RD = %h, A = %h, B = %h, W_Register = %h", PC, IR, OPCODE, RA, RB, RD, {RA}, {RB}, W_Reg);

case (OPCODE)
	4'b0000 : begin
	temp_data <= PC;
	end

	4'b0001 : begin
	RD = {RA, RB};
	end

	4'b0010 : begin
	RD = {RA + RB};
	end

	4'b0011 : begin
	RD = {RA} + RB;
	end

	4'b0100 : begin
	RD = {RA - RB};
	end

	4'b0101 : begin
	RD = {RA * RB};
	end

	4'b0110 : begin
	RD = {RA / RB};
	end

	4'b0111 : begin
	RD = {RB} + 7'd1;
	end

	4'b1000 : begin
	RD = {RB} - 7'd1;
	end

	4'b1001 : begin
	RD = ~({RA} | {RB});
	end

	4'b1010 : begin
	RD = ~({RA} & {RB});
	end

	4'b1011 : begin
	RD = {RA} ^ {RB};
	end

	4'b1100 : begin
	RD = ~{RB};
	end

	4'b1101 : begin
	temp_data = {RA, RB};
	end

	4'b1110 : begin
	if ({RA} >= {RB})
	temp_data <= RD;
	end

	4'b1111 : begin
	RD = RD;
	end

	default : RD = RD;

	endcase

end

endmodule
